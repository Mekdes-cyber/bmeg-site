{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","selection","_handleCyCalled","handleCy","cy","_this","_cy","window","on","event","setState","target","data","_this2","this","reducer","accumulator","currentValue","push","JSON","parse","fetch","props","dataset","url","then","response","text","elements","split","reduce","console","log","react_default","a","createElement","columns","length","Object","keys","map","key","id","Header","accessor","react_cytoscape_default","style","height","width","layout","name","es","React","Component","Boolean","location","hostname","match","run","graph","document","getElementById","ReactDOM","render","src_App","addEventListener","attachEvent","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQA2EeA,oNAnEbC,MAAQ,CAEJC,UAAW,MAEfC,iBAAkB,IAkBlBC,SAAW,SAAAC,GACLA,IAAOC,EAAKC,KAAOD,EAAKH,kBAG5BG,EAAKC,IAAMF,EACXG,OAAOH,GAAKA,EACZC,EAAKH,iBAAkB,EACvBE,EAAGI,GAAG,MAAO,OAAQ,SAAAC,GACnBJ,EAAKK,SAAS,CAAET,UAAW,CAACQ,EAAME,OAAOC,YAE3CR,EAAGI,GAAG,MAAO,OAAQ,SAAAC,GACnBJ,EAAKK,SAAS,CAAET,UAAW,CAACQ,EAAME,OAAOC,iGA3BzB,IAAAC,EAAAC,KAEZC,EAAU,SAACC,EAAaC,GAI5B,OAHIA,GACAD,EAAYE,KAAKC,KAAKC,MAAMH,IAEzBD,GAGTK,MAAMP,KAAKQ,MAAMC,QAAQC,KACtBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAb,GACFC,EAAKH,SAAS,CAAEkB,SAAYhB,EAAKiB,MAAM,SAASC,OAAOf,EAAS,yCAoBtE,IAAMD,KAAKd,MAAM4B,SAEb,OADAG,QAAQC,IAAI,oCACLC,EAAAC,EAAAC,cAAA,YAGX,IAAIC,EAAU,GASd,OARItB,KAAKd,MAAMC,UAAUoC,OAAS,IAChCD,EAAUE,OAAOC,KAAKzB,KAAKd,MAAMC,UAAU,IAAIuC,IAAI,SAACC,EAAKC,GACvD,MAAO,CACLC,OAAQF,EACRG,SAAUH,MAITR,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEN,SAAUd,KAAKd,MAAM4B,SACrBkB,MAAQ,CAAEC,OAAQ,QAASC,MAAO,SAClCC,OAAS,CAACC,KAAMpC,KAAKQ,MAAMC,QAAQ0B,QACnC7C,GAAIU,KAAKX,WAEX8B,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACEvC,KAAOE,KAAKd,MAAMC,UAClBmC,QAAYA,YA/DFgB,IAAMC,YCMJC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCVN,SAASC,IAEP,IAAMC,EAAQC,SAASC,eAAe,SACtC,GAAIF,EAAO,CAET,IAAMpC,EAAUoC,EAAMpC,QACtBuC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAKzC,QAASA,IAAYoC,IAK1CpD,OAAO0D,iBACT1D,OAAO0D,iBAAiB,mBAAoBP,GAE5CnD,OAAO2D,YAAY,SAAUR,GD2GzB,kBAAmBS,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.6e100fdf.chunk.js","sourcesContent":["import CytoscapeComponent from 'react-cytoscapejs';\nimport React from 'react';\n\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\n\nclass App extends React.Component {\n\n  state = {\n      // selected node or edge\n      selection: []\n  }\n  _handleCyCalled = false;\n\n  componentDidMount() {\n    // we receieve \\n separated json\n    const reducer = (accumulator, currentValue) => {\n      if (currentValue) {\n          accumulator.push(JSON.parse(currentValue));\n      }\n      return accumulator;\n    }\n    // get data, assumed to be cytoscape friendly, parse into an array of obj\n    fetch(this.props.dataset.url)\n      .then(response => response.text())\n      .then(data => {\n          this.setState({ 'elements': data.split(/\\r?\\n/).reduce(reducer, []) })\n      });\n  }\n\n  handleCy = cy => {\n    if (cy === this._cy && this._handleCyCalled) {\n      return;\n    }\n    this._cy = cy;\n    window.cy = cy;\n    this._handleCyCalled = true;\n    cy.on('tap', 'edge', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('tap', 'node', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n  }\n\n  render() {\n    if (! this.state.elements) {\n        console.log('Cytoscape - state.elements.empty')\n        return <div/>;\n    }\n\n    var columns = [];\n    if (this.state.selection.length > 0) {\n      columns = Object.keys(this.state.selection[0]).map((key, id)=>{\n        return {\n          Header: key,\n          accessor: key\n        }\n      })\n    }\n    return <div>\n      <CytoscapeComponent\n        elements={this.state.elements}\n        style={ { height: '800px', width: '800px' } }\n        layout={ {name: this.props.dataset.layout} }\n        cy={this.handleCy}\n      />\n      <ReactTable\n        data={ this.state.selection }\n        columns = { columns }\n      />\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nfunction run() {\n  // get div where Graph should be rendered\n  const graph = document.getElementById('graph')\n  if (graph) {\n    // get parameters set by caller on element data-* attributes\n    const dataset = graph.dataset ;\n    ReactDOM.render(<App dataset={dataset}/>, graph);\n  }\n}\n\n// mount react on page load\nif (window.addEventListener) {\n  window.addEventListener('DOMContentLoaded', run);\n} else {\n  window.attachEvent('onload', run);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}