{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["viewUtilities","Cytoscape","jquery","App","state","selection","_handleCyCalled","handleCy","cy","_this","_cy","layout","name","props","dataset","on","event","setState","target","data","nodesWithHiddenNeighbor","edges","connectedNodes","thinBorder","api","show","nodes","neighborhood","union","parent","thickenBorder","selectedEles","$","reduce","accumulator","ele","push","neighbor","node","successors","outgoers","neighborSelectTime","run","enableMarqueeZoom","zoomToSelected","e","disableMarqueeZoom","marqueeZoom","highlightNeighbors","length","removeHighlights","hideSelected","hide","hideUnSelected","showAll","elements","redraw","help","window","M","toast","html","_this2","this","fetch","url","then","response","json","eles","forEach","defaultBorderWidth","Number","css","substring","react_default","a","createElement","columns","map","key","Header","accessor","className","href","onClick","react_cytoscape_default","style","height","width","es","React","Component","Boolean","location","hostname","match","graph","document","getElementById","ReactDOM","render","src_App","addEventListener","attachEvent","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0e1a3a7.chunk.js","sourcesContent":["/* eslint-disable anchor-is-valid */\n\nimport React from 'react';\n\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\n\nimport Cytoscape from 'cytoscape';\nimport jquery from 'jquery';\nimport viewUtilities from 'cytoscape-view-utilities';\nviewUtilities(Cytoscape, jquery)\n\nclass App extends React.Component {\n\n  state = {\n      // selected node or edge\n      selection: []\n  }\n  _handleCyCalled = false;\n\n  componentDidMount() {\n    // get data, assumed to be cytoscape friendly, parse into an array of obj\n    fetch(this.props.dataset.url)\n      .then(response => response.json())\n      .then(data => {\n          this.setState({ 'elements': data })\n      });\n  }\n\n  handleCy = cy => {\n    // cy setup\n    if (cy === this._cy && this._handleCyCalled) {\n      return;\n    }\n    this._cy = cy;\n    this._handleCyCalled = true;\n    this.layout= cy.layout(\n      {name: this.props.dataset.layout}\n    )\n    cy.on('tap', 'edge', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('tap', 'node', event => {\n      this.setState({ selection: [event.target.data()] });\n    })\n    cy.on('doubleTap', 'node', event => {\n      var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n      this.thinBorder(nodesWithHiddenNeighbor);\n      this.api.show(cy.nodes(\":selected\").neighborhood().union(cy.nodes(\":selected\").neighborhood().parent()));\n      nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n      this.thickenBorder(nodesWithHiddenNeighbor);\n    })\n    cy.on('select', event => {\n      // get the graph data behind all selected elements\n      var selectedEles = this._cy.$(\":selected\");\n      const reducer = (accumulator, ele) => {\n        if (ele) {\n            accumulator.push(ele.data());\n        }\n        return accumulator;\n      }\n      this.setState({ 'selection': selectedEles.reduce(reducer,[]) })\n    })\n    this.api = cy.viewUtilities({\n        neighbor: function(node){\n            return node.successors() || node.outgoers();\n        },\n        neighborSelectTime: 1000\n    });\n    this.layout.run()\n    this.api.enableMarqueeZoom();\n  }\n\n  //\n  // button handlers\n  //\n  // Increase border width to show nodes with hidden neighbors\n  thickenBorder(eles){\n    eles.forEach(function( ele ){\n      var defaultBorderWidth = Number(ele.css(\"border-width\").substring(0,ele.css(\"border-width\").length-2));\n      ele.css(\"border-width\", defaultBorderWidth + 2);\n    });\n    return eles;\n  }\n  // Decrease border width when hidden neighbors of the nodes become visible\n  thinBorder(eles){\n    eles.forEach(function( ele ){\n      var defaultBorderWidth = Number(ele.css(\"border-width\").substring(0,ele.css(\"border-width\").length-2));\n      ele.css(\"border-width\", defaultBorderWidth - 2);\n    });\n    return eles;\n  }\n  zoomToSelected = e => {\n    this.api.disableMarqueeZoom();\n    var selectedEles = this._cy.$(\":selected\");\n    this.api.zoomToSelected(selectedEles);\n  }\n  marqueeZoom = e => {\n    this.api.enableMarqueeZoom();\n  }\n  highlightNeighbors = e => {\n    this.api.disableMarqueeZoom();\n    if(this._cy.$(\":selected\").length > 0)\n      this.api.highlightNeighbors(this._cy.$(\":selected\"));\n  }\n  removeHighlights = e => {\n    this.api.disableMarqueeZoom();\n    this.api.removeHighlights();\n  }\n  hideSelected = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.hide(this._cy.$(\":selected\"));\n    nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thickenBorder(nodesWithHiddenNeighbor);\n  }\n  hideUnSelected = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.hide(this._cy.$(\":unselected\"));\n    nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thickenBorder(nodesWithHiddenNeighbor);\n  }\n  showAll = e => {\n    this.api.disableMarqueeZoom();\n    var nodesWithHiddenNeighbor = this._cy.edges(\":hidden\").connectedNodes(':visible');\n    this.thinBorder(nodesWithHiddenNeighbor);\n    this.api.show(this._cy.elements());\n  }\n  redraw = e => {\n    this.layout.run();\n  }\n  help = e => {\n    window.M.toast({html: '<i>SHIFT + drag to specify region.  SHIFT + taphold to select neighbors</i>'})\n  }\n\n  render() {\n    if (! this.state.elements) {\n        return <div/>;\n    }\n\n    const keys = ['_label', 'cmd', 'path'];\n    const columns = keys.map((key) => {return { Header: key, accessor: key }});\n\n    return <div>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <ul className=\"right hide-on-med-and-down\">\n            <li><a href=\"#/\" onClick={this.hideSelected}>Hide Selected</a></li>\n            <li><a href=\"#/\" onClick={this.hideUnSelected}>Hide Unselected</a></li>\n            <li><a href=\"#/\" onClick={this.showAll}>Show All</a></li>\n            <li><a href=\"#/\" onClick={this.zoomToSelected}>Zoom To Selected</a></li>\n            <li><a href=\"#/\" onClick={this.marqueeZoom}>Marquee Zoom</a></li>\n            <li><a href=\"#/\" onClick={this.highlightNeighbors}>Highlight Neighbors</a></li>\n            <li><a href=\"#/\" onClick={this.removeHighlights}>Remove Highlights</a></li>\n            <li><a href=\"#/\" onClick={this.redraw}>Re-Draw</a></li>\n            <li><a href=\"#/\" onClick={this.help}>Help</a></li>\n          </ul>\n        </div>\n      </nav>\n      <div>\n        <CytoscapeComponent\n          elements={this.state.elements}\n          style={ { height:  this.props.dataset.height , width: this.props.dataset.width } }\n          cy={this.handleCy}\n        />\n      </div>\n      <ReactTable\n        data={ this.state.selection }\n        columns = { columns }\n      />\n    </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nfunction run() {\n  // get div where Graph should be rendered\n  const graph = document.getElementById('graph')\n  if (graph) {\n    // get parameters set by caller on element data-* attributes\n    const dataset = graph.dataset ;\n    ReactDOM.render(<App dataset={dataset}/>, graph);\n  }\n}\n\n// mount react on page load\nif (window.addEventListener) {\n  window.addEventListener('DOMContentLoaded', run);\n} else {\n  window.attachEvent('onload', run);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}